<%#
    Dynamic arrays from a std::vector<T> in the SK code must be allocated on
    the heap and freed after use. An example would be:

    1. SK function `Foo' returns a `std::vector<T>' (eg `vector<int>`)
    2. Convert `std::vector<T>' as `__sklib_vector_<T>'
       (eg `__sklib_vector_int`)
    3. Return `__sklib_vector_<T>'
    4. Language `Bar' calls Lib function `Foo' returning the
       `__sklib_vector_<T>`
    5. A dynamic array is created in language `Bar`
    6. The contents of the `__sklib_vector_<T>`
    6. Free the returned `__sklib_vector' from the heap
    7. Return the wrapped `Bar::Vector'
%>
<%
  @vector_types.each do |type|
    if splashkit_library?
      update_field_suffix = "_from_lib"
      read_field_suffix = "_from_app"
    else
      update_field_suffix = "_from_app"
      read_field_suffix = "_from_lib"
    end
%>
<%#
    Free __sklib_vector function frees heap data that the library has allocated.
    Must mark with extern "C" if being declared by library.
%>
<% if splashkit_library? %>extern "C" <% end %>
void <%= func_prefix %>__free__sklib_vector_<%= type %>(__sklib_vector_<%= type %> v) {
<%
    # Freeing a std::vector<string> requires us to recursively free the
    # allocated __sklib_strings inside the std::vector.
    # String resources in the library will be freed when the vector is converted
    # and each of the strings are read back.
    if type == 'string' && splashkit_adapter?
%>
    for (unsigned int i = 0; i < v.size<%= update_field_suffix %>; i++) {
        <%= func_prefix %>__free__sklib_string(v.data<%= update_field_suffix %>[i]);
    }
<%
    end # end if type is string
%>
    free(v.data<%= update_field_suffix %>);
}
<%#
    Converts a std::vector into a __sklib__vector by allocating each of its members
    onto the heap.
%>
__sklib_vector_<%= type %> <%= func_prefix %>__to_sklib_vector_<%= type %>(const std::vector<<%= type %>> &v) {
    __sklib_vector_<%= type %> __skreturn;
    __skreturn.size<%= read_field_suffix %> = 0;
    __skreturn.data<%= read_field_suffix %> = nullptr;
    __skreturn.size<%= update_field_suffix %> = static_cast<unsigned int>(v.size());
    __skreturn.data<%= update_field_suffix %> = (<%= lib_map_type_for(type) %> *)malloc(__skreturn.size<%= update_field_suffix %> * sizeof(<%= lib_map_type_for(type) %>));
    unsigned int i = 0;
    for (<%= type %> d : v) {
        __skreturn.data<%= update_field_suffix %>[i] = <%= func_prefix %>__to_sklib_<%= type %>(d);
        i++;
    }
    return __skreturn;
}
<%#
    Converts a __sklib__vector to a std::vector by copying each of its members
    into the std::vector.
%>
vector<<%= type %>> <%= func_prefix %>__to_vector_<%= type %>(const __sklib_vector_<%= type %> &v) {
    vector<<%= type %>> __skreturn;
    for (int i = 0; i < v.size<%= read_field_suffix %>; i++) {
        __skreturn.push_back(<%= func_prefix %>__to_<%= type %>(v.data<%= read_field_suffix %>[i]));
    }
<%
    # If we are an adapter, we need to ask the SplashKit library to free the
    # space it allocated for this dynamic on returning a vector. Then we
    # return our copy of this.
    #
    # To make sure we're calling the library code, explicitly use
    # `CLib::FUNC_PREFIX`.
    if splashkit_adapter?
%>
    <%= CLib::FUNC_PREFIX %>__free__sklib_vector_<%= type %>(v);
<%
    end
%>
    return __skreturn;
}
<%#
    These update functions take existing std::vector or sklib_vector values
    and update them. These are used with pass by ref parameters to update the
    sklib_vector or std::vector from the other component.
%>
<%
    # If defining the library, we will update a __sklib__vector
    if splashkit_library?
%>
void <%= func_prefix %>__update_from_vector_<%= type %>(const std::vector<<%= type %>> &v, __sklib_vector_<%= type %> *__skreturn) {
    __skreturn->size<%= update_field_suffix %> = static_cast<unsigned int>(v.size());
    __skreturn->data<%= update_field_suffix %> = (<%= lib_map_type_for(type) %> *)malloc(__skreturn->size<%= update_field_suffix %> * sizeof(<%= lib_map_type_for(type) %>));
    unsigned int i = 0;
    for (<%= type %> d : v) {
        __skreturn->data<%= update_field_suffix %>[i] = <%= func_prefix %>__to_sklib_<%= type %>(d);
        i++;
    }
}
<%
    # If defining an adapter, then only adapters will update std::vector
    else
%>
void <%= func_prefix %>__update_from_vector_<%= type %>(__sklib_vector_<%= type %> &v, std::vector<<%= type %>> &__skreturn) {
    __skreturn.clear();
    for (int i = 0; i < v.size<%= read_field_suffix %>; i++) {
        <%= type %> d = <%= func_prefix %>__to_<%= type %>(v.data<%= read_field_suffix %>[i]);
        __skreturn.push_back(d);
    }
    <%# Now it is copied... we need to get the library to free this! %>
    <%= CLib::FUNC_PREFIX %>__free__sklib_vector_<%= type %>(v);
}
<%
    end # end if is library
%>
<%
  end # end vectors.each
%>
