<%#
    Dynamic arrays from a std::vector<T> in the SK code must be allocated on
    the heap and freed after use. An example would be:

    1. SK function `Foo' returns a `std::vector<T>' (eg `vector<int>`)
    2. Convert `std::vector<T>' as `__sklib_vector_<T>'
       (eg `__sklib_vector_int`)
    3. Return `__sklib_vector_<T>'
    4. Language `Bar' calls Lib function `Foo' returning the
       `__sklib_vector_<T>`
    5. A dynamic array is created in language `Bar`
    6. The contents of the `__sklib_vector_<T>`
    6. Free the returned `__sklib_string' from the heap
    7. Return the wrapped `Bar::String'
%>
<%
  @vector_types.each do |vector|
    type = vector[:type_parameter]
%>
typedef struct {
    <%= lib_map_type_for(type) %> *data;
    unsigned int size;
} __sklib_vector_<%= type %>;
void __skadapter__free__sklib_vector_<%= type %>(__sklib_vector_<%= type %> v) {
<%
    if type == 'string'
%>
    for (int i = 0; i < v.size; i++) {
        __skadapter__free__sklib_string(v.data[i]);
    }
<%
    end # end if
%>
    free(v.data);
}
__sklib_vector_<%= type %> __skadapter__to_sklib_vector_<%= type %>(const std::vector<<%= type %>> &v) {
    __sklib_vector_<%= type %> __skreturn;
    __skreturn.size = v.size();
    __skreturn.data = (<%= lib_map_type_for(type) %> *)malloc(__skreturn.size * sizeof(<%= lib_map_type_for(type) %>));
    int i = 0;
    for (<%= type %> d : v) {
        __skreturn.data[i] = __skadapter__to_sklib_<%= type %>(d);
        i++;
    }
    return __skreturn;
}
vector<<%= type %>> __skadapter__to_vector_<%= type %>(const __sklib_vector_<%= type %> &v) {
    vector<<%= type %>> __skreturn;
    for (int i = 0; i < v.size; i++) {
        __skreturn.push_back(__skadapter__to_<%= type %>(v.data[i]));
    }
#ifdef BUILDING_SK_ADAPTER
    __skadapter__free__sklib_vector_<%= type %>(v); //TODO: Should be calling __sklib__ to free as it created this!
#endif
    return __skreturn;
}
<%
  end # end vectors.each
%>
