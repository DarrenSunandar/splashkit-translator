<%#
    Strings from a std::string in the SK code must be allocated on heap and
    freed after use. An example would be:

    1. SK function `Foo' returns a `std::string'
    2. Wrap `std::string' as `__sklib_string'
    3. Return `__sklib_string'
    4. Language `Bar' calls Lib function `Foo' returning the `__sklib_string'
    5. Wrap the returned `__sklib_string''s underlying `char*` in `Bar::String'
    6. Free the returned `__sklib_string' from the heap
    7. Return the wrapped `Bar::String'
%>
extern "C" typedef struct {
    char *string;
    unsigned int size;
} __sklib_string;
<%#
    The SplashKit adapter needs access to the SplashKit clib free function.
%>
<%
    # Must forward declare C Library free function as external "C" in adapters
    unless is_splashkit_library?
%>
extern "C" void <%= CLib::FUNC_PREFIX %>__free__sklib_string(__sklib_string s);
<%
    end # end unless
%>
<%= "extern \"C\" " if is_splashkit_library? %>void <%= func_prefix %>__free__sklib_string(__sklib_string s) {
    free(s.string);
}
__sklib_string <%= func_prefix %>__to_sklib_string(const std::string &s) {
    __sklib_string __skreturn;
    __skreturn.size = static_cast<unsigned int>(s.length());
    __skreturn.string = (char *)malloc(__skreturn.size + 1);
    strcpy(__skreturn.string, s.c_str());
    return __skreturn;
}
std::string <%= func_prefix %>__to_string(const __sklib_string &s) {
    std:string result = std::string(s.string);
<%
    # The library does not free string that it is converting. This will be
    # handled by the adapters that are calling into the SplashKit c library
    unless is_splashkit_library?
      # It is the adapter... so we are returning a string created by the
      # splashkit library on a return...
      # So we must ask the SplashKit library to free this...
%>
    <%= CLib::FUNC_PREFIX %>__free__sklib_string(s);
<%
    end # unless library
%>
    return result;
}
