<%
  @vector_types.each do |type|
    sk_type = sk_type_for(type)
    lib_type = lib_type_for(type)
%>
<%#
    Create the record to map between languages.
%>
class <%= sklib_prefix() %>_vector_<%= type %>(Structure):
    _fields_ = [
      ("data_from_app", POINTER(<%= lib_type %>)),
      ("size_from_app", c_uint),
      ("data_from_lib", POINTER(<%= lib_type %>)),
      ("size_from_lib", c_uint),
    ]

    def __init__(self, num):
        elems = (<%= lib_type %> * num)()
        self.data_from_app = cast(elems, POINTER(<%= lib_type %>))
        self.size_from_app = num
        self.data_from_lib = None
        self.size_from_lib = 0

<%#
    Create a function to free our part of the mapped data. This is the
    function to free the library part of the vector mapping.
%>
sklib.__sklib__free__sklib_vector_<%= type %>.argtypes = [ <%= sklib_prefix() %>_vector_<%= type %> ]
sklib.__sklib__free__sklib_vector_<%= type %>.restype = None
<%#
   Free our part
%>
def __skadapter__free__sklib_vector_<%= type %>(v):
<%
    # Freeing a std::vector<string> requires us to recursively free the
    # allocated __sklib_strings inside the std::vector.
    # String resources in the library will be freed when the vector is converted
    # and each of the strings are read back.
    if type == 'string'
%>
    for i in range(0, v.size_from_app):
        __skadapter__free__sklib_string(v.data_from_app[i])
<%
    end # end if type is string
%>
    v.data_from_app = None

<%#
    Converts a array of type into a __sklib__vector by allocating each of its
    members onto the heap.
%>
def __skadapter__to_sklib_vector_<%= type %>(v):
    result = _sklib_vector_<%= type %>(len(v))
    for i in range(0, len(v)):
        result.data_from_app[i] = __skadapter__to_sklib_<%= type %>(v[i])
    return result

<%#
    Converts a _sklib__vector to a dynamic array of type by copying each of
    its members into the dynamic array
%>
def __skadapter__to_vector_<%= type %>(v):
    result = []
    for i in range(0, v.size_from_lib):
        result.append ( __skadapter__to_<%= type %>(v.data_from_lib[i]) )
<%
    # We need to ask the SplashKit library to free the
    # space it allocated for this dynamic on returning a vector. Then we
    # return our copy of this.
%>
    sklib.__sklib__free__sklib_vector_<%= type %>(v)
    return result
<%#
    These update functions take existing std::vector or sklib_vector values
    and update them. These are used with pass by ref parameters to update the
    sklib_vector or std::vector from the other component.
%>
def __skadapter__update_from_vector_<%= type %>(v, __skreturn):
    del __skreturn[:]
    for i in range(0, v.size_from_lib):
        __skreturn.append( __skadapter__to_<%= type %>(v.data_from_lib[i]) )

<%# Now it is copied... we need to get the library to free this! %>
    sklib.__sklib__free__sklib_vector_<%= type %>(v)
<%
  end # end vectors.each
%>
