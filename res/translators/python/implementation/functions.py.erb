<%#
  Create the SplashKit functions to call sklib
%>
<%
  @functions.each do |function|
%>
def <%= sk_function_name_for(function) %> ( <%=
function[:parameters].map do |param_name, param_data| param_name end.join(', ')
%> ):
<%#
    1. Convert each parameter using the mapper functions available
%>
<%
    function[:parameters].each do |param_name, param_data|
%>
  __skparam__<%= param_name %> = <%= lib_mapper_fn_for param_data %>(<%= param_name.variable_case %>)
<%
    end
%>
<%#
    2. Make the function call (and assign __skreturn if non-void)
%>
<%
    return_val  = "__skreturn = " if is_func?(function)
    lib_fn_name = "sklib." + lib_function_name_for(function)
    param_list  = lib_argument_list_for(function)
    func_call   = "#{return_val}#{lib_fn_name}(#{param_list})"
%>
  <%= func_call %>
<%#
    3. Update all non-const references.
        -- if it can be directly copied... do that.
        -- otherwise use the types update function
%>
<%
    function[:parameters].each do |param_name, param_data|
      if param_data[:is_reference] && !param_data[:is_const]
%>
  <%= param_name.variable_case %> = <%= sk_mapper_fn_for param_data %>(__skparam__<%= param_name %>)
<%
      end # end if is non const ref
    end # end parameters.each
%>
<%#
    4. Assign result to __skreturn variable if non-void
%>
<%
    if is_func?(function)
%>

  return <%= sk_mapper_fn_for function[:return] %>(__skreturn)
<%
    end # end if function
%>
<%
  end # functions.each
%>
