<%#
    Structs must have each field converted to a compatible Lib type (i.e., the
    field type `foo' becomes `__sklib_foo'). Then mappers must be made to and
    from the Lib and SK code. Can't use a macro for this and cannot be a static
    cast so we must generate the functions individually.
 %>
<%
  @structs.each do |struct|
%>
<%#
    Definition of structs can use lib_struct_field_for for convenience
%>
    [ StructLayout( LayoutKind.Sequential, CharSet=CharSet.Ansi ) ]
    internal struct __sklib_<%= struct[:name] %>

    {
<%
      struct[:fields].each do |field_name, field_data|
        if field_data[:is_array]
          total_size = field_data[:array_dimension_sizes].inject :*
%>
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=<%= total_size %>)]
<%      end     %>
        public <%= lib_struct_field_for(field_name, field_data) %>;
<%
      end # end fields.each
%>
    }

    public struct <%= struct[:name].to_pascal_case() %>
    {
<%
    struct[:fields].each do |field_name, field_data|
%>
      public <%= sk_struct_field_for(field_name, field_data) %>;
<%
    end # end fields.each

    def get_method_data(fn)
      {
        method_name: fn[:name].to_s.to_pascal_case,
        params: method_parameter_list_for(fn),
        args: method_argument_list_for(fn)
      }
    end

    # Add methods
    struct[:methods].each do |fn|
      method_data = get_method_data(fn)
      return_type = is_func?(fn) ? sk_type_for(fn[:return][:type]) : 'void'
%>

    public static <%= return_type %> <%= fn[:attributes][:method].function_case %>(<%= method_data[:params] %>)
    {
<%      if is_func? fn %>
        return SplashKit.<%= fn[:name].function_case %>(<%= method_data[:args] %>);
<%      else %>
        SplashKit.<%= fn[:name].function_case %>(<%= method_data[:args] %>);
<%      end %>
    }

<%
    end # methods

    struct[:properties].each do | property_name, property |
      if property[:getter]
        property_type = sk_type_for(property[:getter][:return][:type])
        method_data = get_method_data(property[:getter])
      else
        property_type = sk_type_for(property[:setter][:parameters].select { |k,v| v[:type] != struct[:name] }.map { |k,v| v }.first[:type])
        method_data = get_method_data(property[:setter])
      end

%>
    public static <%= property_type %> <%= property_name.to_s.to_pascal_case %>

    {
<%
      if property[:getter]
        fn = property[:getter]
        method_data = get_method_data(fn)
%>
        get { return SplashKit.<%= fn[:name].function_case %>(); }
<%
      end

      if property[:setter]
        fn = property[:setter]
        method_data = get_method_data(fn)
%>
        set { SplashKit.<%= fn[:name].function_case %>(value); }
<%
      end
%>
    }
<%
    end # properties
%>
  }
<%
    end # end struct.each
%>
