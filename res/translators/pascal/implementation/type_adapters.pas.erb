<%#
  String adapters
%>
function __skadapter__to_sklib_string(s: String): __sklib_string;
begin
  result.size := Length(s);
  result.str := StrAlloc(Length(s) + 1);
  StrPCopy(result.str, s);
end;
procedure __skadapter__free_sklib_string_internal_pointer(s: PChar; size: Integer); cdecl; external;
procedure __skadapter__free_sklib_string(s: __sklib_string);
begin
  StrDispose(s.str);
end;
function __skadapter__to_string(s: __sklib_string): String;
begin
  result := StrPas(s.str);
end;

<%#
  Boolean adapters
%>
function __skadapter__to_sklib_bool(v: Boolean): Integer;
begin
  if v = true then result := 1 else result := 0;
end;
function __skadapter__to_bool(v: Integer): Boolean;
begin
  result := v = 1;
end;

<%#
  Direct type adapters
%>
<% @direct_types.each do |c_type, pas_type| %>
function __skadapter__to_sklib_<%= c_type %>(v: <%= pas_type %>): <%= pas_type %>;
begin
  result := v;
end;
function __skadapter__to_<%= c_type %>(v: <%= pas_type %>): <%= pas_type %>;
begin
  result := v;
end;
<% end %>

<%#
  Typealiases:
    __sklib_ptr to PascalType
    PascalType to __sklib_ptr
%>
<% @typealiases.each do |typealias| %>
function __skadapter__to_sklib_<%= typealias[:name] %>(v: __sklib_ptr): <%= typealias[:name].type_case %>;
begin
  result := <%= typealias[:name].type_case %>(v);
end;
function __skadapter__to_<%= typealias[:name] %>(v: <%= typealias[:name].type_case %>): __sklib_ptr;
begin
  result := __sklib_ptr(v);
end;
<% end %>

<%#
  Struct adapter functions mapping all fields to/from their __sklib type
 %>
<% @structs.each do |struct| %>
function __skadapter__to_sklib_<%= struct[:name] %>(v: <%= struct[:name] %>): <%= struct[:name].type_case %>;
begin
<% struct[:fields].each do |field_name, field_data| %>
  result.<%= field_name %> := __skadapter__to_sklib_<%= field_data[:type] %>(v.<%= field_name %>);
<% end %>
end;
function __skadapter__to_<%= struct[:name] %>(v: <%= struct[:name].type_case %>): __sklib_<%= struct[:name] %>;
begin
<% struct[:fields].each do |field_name, field_data| %>
  result.<%= field_name %> := __skadapter__to_<%= field_data[:type] %>(v.<%= field_name %>);
<% end %>
end;
<% end %>

<%#
  Enum adapters map to/from Integer
 %>
<% @enums.each do |enum| %>
function __skadapter__to_<%= enum[:name] %>(v: Integer): <%= enum[:name].type_case %>;
begin
  result := <%= enum[:name].type_case %>(v);
end;
function __skadapter__to_sklib_<%= enum[:name] %>(v: <%= enum[:name].type_case %>): Integer;
begin
  result := Integer(v);
end;
<% end %>
