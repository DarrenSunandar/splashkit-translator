<%#
  SplashKit __sklib_string wrapper
%>
__sklib_string = record
  str: PChar;
  size: Integer;
end;
function __skadapter__to_sklib_string(s: String): __sklib_string;
begin
  result.size := Length(s);
  result.str := StrAlloc(Length(s) + 1);
  StrPCopy(result.str, s);
end;
procedure __skadapter__free_sklib_string_internal_pointer(s: PChar; size: Integer); cdecl; external;
procedure __skadapter__free_sklib_string(s: __sklib_string);
begin
  StrDispose(s.str);
end;
function __skadapter__to_string(s: __sklib_string): String;
begin
  result := StrPas(s.str);
end;

<%#
  SplashKit __sklib_string wrapper
%>
__sklib_string = record
  str: PChar;
  size: Integer;
end;

<%#
  `__sklib_ptr' is a wrapper for typealiases to pointer types using type
  casts.
%>
__sklib_ptr = Pointer;

<%#
  Naming for SK lib functions that return structs as alias to Pascal type
%>
<% @structs.each do |struct| %>
__sklib_<%= struct[:name] %> = <%= struct[:name].type_case %>;
<% end %>
