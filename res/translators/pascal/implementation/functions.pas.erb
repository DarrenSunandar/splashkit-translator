<%#
  Forward declare SKLib functions
%>
<% @functions.each do |function| %>
<% if is_void?(function) %>procedure <% else %>function <% end %>
<%= CLib.lib_function_name_for(function) %>(<%=
  function[:parameters].map do |param_name, param_data|
    param_name.variable_case + ": " + lib_type_for(param_data[:type])
  end.join('; ')
%>)<% unless is_void?(function) %>: <%= lib_type_for(function[:return_type]) %><% end %>; cdecl; external;
<% end %>

<%#
  Implement Pascal functions (pas -> clib -> pas)
%>
<% @functions.each do |function| %>
<%# Function signature %>
<% if is_void?(function) %>procedure <% else %>function <% end %>
<%= function[:name].function_case %>(<%=
  function[:parameters].map do |param_name, param_data|
    param_name.variable_case + ": " + pascal_type_for(param_data[:type])
  end.join('; ')
%>)<% unless is_void?(function) %>: <%= pascal_type_for(function[:return_type]) %><% end %>;
<% if (!function[:parameters].empty? || !is_void?(function)) %>
<%# Variable declaration block %>
var
<% end %>
<% function[:parameters].each do |param_name, param_data| %>
  __skparam__<%= param_name %>: <%= lib_type_for(param_data[:type]) %>;
<% end %>
<% unless is_void?(function) %>
  __skreturn: <%= lib_type_for(function[:return_type]) %>;
<% end %>
begin
<%# Convert params to clib type %>
<% function[:parameters].each do |param_name, param_data| %>
  __skparam__<%= param_name %> := __skadapter__to_sklib_<%= param_data[:type] %>(<%= param_name %>);
<% end %>
<%# Call clib function %>
  <% unless is_void?(function) %>__skreturn := <% end %>
<%= CLib.lib_function_name_for(function) %>(<%=
function[:parameters].map { |param_name, _| "__skparam__#{param_name}" }.join(', ')
%>);
<%# Assign result to pas type %>
<% unless is_void?(function) %>
  result := __skadapter__to_<%= function[:return_type] %>(__skreturn);
<% end %>
end;
<% end %>
